from utils.detection_util import *
from features.header_real_value_feature import *
from features.import_dll_feature import *
from features.string_feature import *
import argparse



if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--paths', nargs='+', default=['./data/clone_detection/', './data/benign/', './data/malicious/'],
                        help='Paths to load training data for masked language model.')
    parser.add_argument('--block_n_layers', type=int, help='Number of layers at block level', required=True)
    parser.add_argument('--function_n_layers', type=int, help='Number of layers at function level', required=True)
    parser.add_argument('--binary_n_layers', type=int, help='Number of layers at binary level', required=True)
    parser.add_argument('--batch_size', type=int, help='', required=True)
    parser.add_argument('--d_word_vec', type=int, help='Dimension of token embeddings.', required=True)
    parser.add_argument('--patience', type=int, help='Patience for early stopping', required=True)
    parser.add_argument('--max_epochs', type=int, help='', required=True)
    parser.add_argument('--n_head', type=int, help='Number of attention heads', required=True)
    parser.add_argument('--d_k', type=int, help='Dimension of key vectors', required=True)
    parser.add_argument('--d_v', type=int, help='Dimension of value vectors', required=True)
    parser.add_argument('--d_model', type=int, help='', required=True)
    parser.add_argument('--d_inner', type=int, help='Dimension of hidden layer of positionwise feedforward neural '
                                                    'network', required=True)
    parser.add_argument('--n_hidden', type=int, help='Dimension of hidden layer to predict tokens', required=True)
    parser.add_argument('--iffnn_hidden_dims', type=str, help='e.g., [256,128,128]', required=True)
    parser.add_argument('--act_func', type=str, help='tanh,relu', required=True)
    parser.add_argument('--use_batnorm', type=bool, help='', required=True)
    parser.add_argument('--use_last_norm', type=bool, help='', required=True)
    parser.add_argument('--use_last_param', type=bool, help='', required=True)
    parser.add_argument('--year_train', type=int, help='', required=True)
    parser.add_argument('--year_test', type=int, help='', required=True)
    parser.add_argument('--train_ratio', type=float, help='', required=True)

    parser.add_argument('--dropout', type=float, help='Dropout rate', required=True)


    paras = parser.parse_args()
    feature_files = ['./data/malicious_binaries_all_benign_software___header_real_value_feature__feature_vectors.pkl','./data/malicious_binaries_all_benign_software___import_dll_feature__feature_vectors.pkl','./data/malicious_binaries_all_benign_software___string_feature__feature_vectors.pkl']
    feature_extractors_f = ['./data/malicious_binaries_all_benign_software___header_real_value_feature.pkl','./data/malicious_binaries_all_benign_software___import_dll_feature.pkl','./data/malicious_binaries_all_benign_software___string_feature.pkl']
    ben_base_path = './data/benign'
    mal_base_path = './data/malicious'
    name='maldet_imad'
    feature_extractors = [header_real_value_feature(),import_dll_feature(),string_feature()]

    #Normal Experiment

    daty='normal'
    fps,f_sets,f_labels,name = create_train_validation_test_for_detection(ben_base_path,mal_base_path,name)
#
    for f_set in f_sets:
        train_valid_test(True,paras,fps,f_set,f_labels,name,daty,feature_extractors,deep_learning=True,use_func=True,inter=True)
        train_valid_test(False,paras,fps,f_set,f_labels,name,daty,feature_extractors,deep_learning=True,use_func=True,inter=True)

    #Time Split Experiment
    daty='split'
    fps,f_set,f_labels,name = create_train_validation_test_for_detection(ben_base_path, mal_base_path, name, time_split_train=paras.year_train, time_split_test=paras.year_test,
                                                                         time_split_train_ratio=paras.train_ratio)


    train_valid_test(True,paras,fps,f_set,f_labels,name,daty,feature_extractors,deep_learning=True,use_func=True,inter=True)
    train_valid_test(False,paras,fps,f_set,f_labels,name,daty,feature_extractors,deep_learning=True,use_func=True,inter=True)